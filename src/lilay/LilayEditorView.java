/*
 * LilayEditorView.java
 */

package lilay;

import java.io.*;
import java.awt.event.*;
import javax.swing.AbstractListModel;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.Timer;
import org.jdesktop.application.*;

/**
 * The application's main frame.
 */
public class LilayEditorView extends FrameView
{
    EditorCanvas canvas;
    JFileChooser chooser;
    Core core;
    String currentFileName;
    LayerListModel listModel;
    ResourceListModel resourceModel;
    TileFrame tileFrame;

    public LilayEditorView( LilayEditorApp app ) throws IOException
    {
        super( app );

        chooser = new JFileChooser();
        chooser.setFileFilter( new javax.swing.filechooser.FileFilter()
        {
            @Override public boolean accept( File file )
                    { return file.isDirectory() || file.getName().endsWith( ".lilay-map" ); }
            @Override public String getDescription()
                    { return "lilay Map Files (.lilay-map)";}
        } );
        core = Core.instance;
        initComponents();

        canvasPanel.add( canvas = new EditorCanvas() );
        resizeCanvas();

        layerList.setModel( listModel = new LayerListModel() );
        resourceList.setModel( resourceModel = new ResourceListModel() );

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action public void showAboutBox()
    {
        if ( aboutBox == null )
        {
            JFrame mainFrame = LilayEditorApp.getApplication().getMainFrame();
            aboutBox = new LilayEditorAboutBox( mainFrame );
            aboutBox.setLocationRelativeTo( mainFrame );
        }

        LilayEditorApp.getApplication().show( aboutBox );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        projectMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        panel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        resourcesTabPanel = new javax.swing.JPanel();
        resourcesPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        resourceList = new javax.swing.JList();
        resourcePanel = new javax.swing.JPanel();
        resourceNew = new javax.swing.JButton();
        resourceEdit = new javax.swing.JButton();
        resourceDelete = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        resourceInfoLabel = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        objectsTabPanel = new javax.swing.JPanel();
        objectsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        objectPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        objectName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        objectImage = new javax.swing.JTextField();
        objectAdd = new javax.swing.JButton();
        objectEdit = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        canvasPanel = new javax.swing.JPanel();
        layersPanel = new javax.swing.JPanel();
        layersScrollPane = new javax.swing.JScrollPane();
        layerList = new javax.swing.JList();
        layerPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        layerName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        layerAdd = new javax.swing.JButton();
        layerType = new javax.swing.JComboBox();
        layerEdit = new javax.swing.JButton();
        layerRemove = new javax.swing.JButton();
        toolBar = new javax.swing.JToolBar();
        fileToolBar = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        editorToolBar = new javax.swing.JToolBar();
        jToggleButton1 = new javax.swing.JToggleButton();

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(lilay.LilayEditorApp.class).getContext().getResourceMap(LilayEditorView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(lilay.LilayEditorApp.class).getContext().getActionMap(LilayEditorView.class, this);
        newMenuItem.setAction(actionMap.get("newProject")); // NOI18N
        newMenuItem.setFont(resourceMap.getFont("uiFont")); // NOI18N
        newMenuItem.setIcon(resourceMap.getIcon("newMenuItem.icon")); // NOI18N
        newMenuItem.setText(resourceMap.getString("Menu.File.New")); // NOI18N
        newMenuItem.setName("newMenuItem"); // NOI18N
        fileMenu.add(newMenuItem);

        openMenuItem.setAction(actionMap.get("open")); // NOI18N
        openMenuItem.setFont(resourceMap.getFont("uiFont")); // NOI18N
        openMenuItem.setIcon(resourceMap.getIcon("openMenuItem.icon")); // NOI18N
        openMenuItem.setText(resourceMap.getString("Menu.File.Open")); // NOI18N
        openMenuItem.setName("openMenuItem"); // NOI18N
        fileMenu.add(openMenuItem);

        saveMenuItem.setAction(actionMap.get("save")); // NOI18N
        saveMenuItem.setFont(resourceMap.getFont("uiFont")); // NOI18N
        saveMenuItem.setIcon(resourceMap.getIcon("saveMenuItem.icon")); // NOI18N
        saveMenuItem.setText(resourceMap.getString("Menu.File.Save")); // NOI18N
        saveMenuItem.setName("saveMenuItem"); // NOI18N
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setAction(actionMap.get("saveAs")); // NOI18N
        saveAsMenuItem.setFont(resourceMap.getFont("uiFont")); // NOI18N
        saveAsMenuItem.setIcon(resourceMap.getIcon("saveAsMenuItem.icon")); // NOI18N
        saveAsMenuItem.setText(resourceMap.getString("Menu.File.SaveAs")); // NOI18N
        saveAsMenuItem.setName("saveAsMenuItem"); // NOI18N
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setFont(resourceMap.getFont("uiFont")); // NOI18N
        exitMenuItem.setIcon(resourceMap.getIcon("exitMenuItem.icon")); // NOI18N
        exitMenuItem.setText(resourceMap.getString("Menu.File.Exit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        projectMenu.setText(resourceMap.getString("projectMenu.text")); // NOI18N
        projectMenu.setName("projectMenu"); // NOI18N

        jMenuItem2.setAction(actionMap.get("projectSettingsDialog")); // NOI18N
        jMenuItem2.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jMenuItem2.setIcon(resourceMap.getIcon("jMenuItem2.icon")); // NOI18N
        jMenuItem2.setText(resourceMap.getString("Menu.Project.ProjectOptions")); // NOI18N
        jMenuItem2.setName("jMenuItem2"); // NOI18N
        projectMenu.add(jMenuItem2);

        menuBar.add(projectMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItem1.setAction(actionMap.get("settingsDialog")); // NOI18N
        jMenuItem1.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jMenuItem1.setIcon(resourceMap.getIcon("jMenuItem1.icon")); // NOI18N
        jMenuItem1.setText(resourceMap.getString("Menu.Editor.Settings")); // NOI18N
        jMenuItem1.setToolTipText(resourceMap.getString("jMenuItem1.toolTipText")); // NOI18N
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenu1.add(jMenuItem1);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setFont(resourceMap.getFont("uiFont")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 410, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        panel.setName("panel"); // NOI18N
        panel.setLayout(new javax.swing.BoxLayout(panel, javax.swing.BoxLayout.LINE_AXIS));

        jTabbedPane1.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jTabbedPane1.setMaximumSize(new java.awt.Dimension(160, 32767));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(160, 328));
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(160, 742));

        resourcesTabPanel.setFont(resourceMap.getFont("resourcesTabPanel.font")); // NOI18N
        resourcesTabPanel.setMinimumSize(new java.awt.Dimension(150, 300));
        resourcesTabPanel.setName("resourcesTabPanel"); // NOI18N
        resourcesTabPanel.setPreferredSize(new java.awt.Dimension(150, 399));
        resourcesTabPanel.setLayout(new java.awt.BorderLayout());

        resourcesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        resourcesPanel.setMinimumSize(new java.awt.Dimension(100, 300));
        resourcesPanel.setName("resourcesPanel"); // NOI18N

        jScrollPane3.setFont(resourceMap.getFont("jScrollPane3.font")); // NOI18N
        jScrollPane3.setName("jScrollPane3"); // NOI18N

        resourceList.setFont(resourceMap.getFont("uiFont")); // NOI18N
        resourceList.setName("resourceList"); // NOI18N
        resourceList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                resourceListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(resourceList);

        javax.swing.GroupLayout resourcesPanelLayout = new javax.swing.GroupLayout(resourcesPanel);
        resourcesPanel.setLayout(resourcesPanelLayout);
        resourcesPanelLayout.setHorizontalGroup(
            resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addContainerGap())
        );
        resourcesPanelLayout.setVerticalGroup(
            resourcesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addContainerGap())
        );

        resourcesTabPanel.add(resourcesPanel, java.awt.BorderLayout.CENTER);

        resourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("resourcePanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("uiFont"))); // NOI18N
        resourcePanel.setMaximumSize(new java.awt.Dimension(32767, 120));
        resourcePanel.setMinimumSize(new java.awt.Dimension(152, 120));
        resourcePanel.setName("resourcePanel"); // NOI18N
        resourcePanel.setPreferredSize(new java.awt.Dimension(152, 120));

        resourceNew.setAction(actionMap.get("newResource")); // NOI18N
        resourceNew.setFont(resourceMap.getFont("uiFont")); // NOI18N
        resourceNew.setIcon(resourceMap.getIcon("resourceNew.icon")); // NOI18N
        resourceNew.setText(resourceMap.getString("resourceNew.text")); // NOI18N
        resourceNew.setToolTipText(resourceMap.getString("resourceNew.toolTipText")); // NOI18N
        resourceNew.setName("resourceNew"); // NOI18N

        resourceEdit.setAction(actionMap.get("editResource")); // NOI18N
        resourceEdit.setFont(resourceMap.getFont("uiFont")); // NOI18N
        resourceEdit.setIcon(resourceMap.getIcon("resourceEdit.icon")); // NOI18N
        resourceEdit.setText(resourceMap.getString("resourceEdit.text")); // NOI18N
        resourceEdit.setToolTipText(resourceMap.getString("resourceEdit.toolTipText")); // NOI18N
        resourceEdit.setEnabled(false);
        resourceEdit.setName("resourceEdit"); // NOI18N

        resourceDelete.setAction(actionMap.get("deleteResource")); // NOI18N
        resourceDelete.setFont(resourceMap.getFont("uiFont")); // NOI18N
        resourceDelete.setIcon(resourceMap.getIcon("resourceDelete.icon")); // NOI18N
        resourceDelete.setText(resourceMap.getString("resourceDelete.text")); // NOI18N
        resourceDelete.setToolTipText(resourceMap.getString("resourceDelete.toolTipText")); // NOI18N
        resourceDelete.setEnabled(false);
        resourceDelete.setName("resourceDelete"); // NOI18N

        jButton7.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jButton7.setText(resourceMap.getString("jButton7.text")); // NOI18N
        jButton7.setName("jButton7"); // NOI18N

        resourceInfoLabel.setFont(resourceMap.getFont("uiFont")); // NOI18N
        resourceInfoLabel.setName("resourceInfoLabel"); // NOI18N

        jButton8.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jButton8.setText(resourceMap.getString("jButton8.text")); // NOI18N
        jButton8.setName("jButton8"); // NOI18N

        javax.swing.GroupLayout resourcePanelLayout = new javax.swing.GroupLayout(resourcePanel);
        resourcePanel.setLayout(resourcePanelLayout);
        resourcePanelLayout.setHorizontalGroup(
            resourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resourceNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resourceEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resourceDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(resourcePanelLayout.createSequentialGroup()
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8))
            .addGroup(resourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(resourceInfoLabel))
        );
        resourcePanelLayout.setVerticalGroup(
            resourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resourcePanelLayout.createSequentialGroup()
                .addGroup(resourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resourceDelete)
                    .addComponent(resourceEdit)
                    .addComponent(resourceNew))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resourceInfoLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(resourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8)))
        );

        resourcesTabPanel.add(resourcePanel, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab(resourceMap.getString("resourcesTabPanel.TabConstraints.tabTitle"), resourcesTabPanel); // NOI18N

        objectsTabPanel.setFont(resourceMap.getFont("uiFont")); // NOI18N
        objectsTabPanel.setMinimumSize(new java.awt.Dimension(150, 300));
        objectsTabPanel.setName("objectsTabPanel"); // NOI18N
        objectsTabPanel.setPreferredSize(new java.awt.Dimension(150, 399));
        objectsTabPanel.setLayout(new java.awt.BorderLayout());

        objectsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        objectsPanel.setMinimumSize(new java.awt.Dimension(100, 300));
        objectsPanel.setName("objectsPanel"); // NOI18N
        objectsPanel.setPreferredSize(new java.awt.Dimension(100, 300));

        jScrollPane2.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jList1.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jList1.setName("jList1"); // NOI18N
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout objectsPanelLayout = new javax.swing.GroupLayout(objectsPanel);
        objectsPanel.setLayout(objectsPanelLayout);
        objectsPanelLayout.setHorizontalGroup(
            objectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                .addContainerGap())
        );
        objectsPanelLayout.setVerticalGroup(
            objectsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );

        objectsTabPanel.add(objectsPanel, java.awt.BorderLayout.CENTER);

        objectPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("objectPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("objectPanel.border.titleFont"))); // NOI18N
        objectPanel.setMaximumSize(new java.awt.Dimension(32767, 110));
        objectPanel.setMinimumSize(new java.awt.Dimension(120, 110));
        objectPanel.setName("objectPanel"); // NOI18N
        objectPanel.setPreferredSize(new java.awt.Dimension(120, 110));

        jLabel1.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        objectName.setText(resourceMap.getString("objectName.text")); // NOI18N
        objectName.setName("objectName"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        objectImage.setText(resourceMap.getString("objectImage.text")); // NOI18N
        objectImage.setName("objectImage"); // NOI18N

        objectAdd.setText(resourceMap.getString("objectAdd.text")); // NOI18N
        objectAdd.setName("objectAdd"); // NOI18N

        objectEdit.setText(resourceMap.getString("objectEdit.text")); // NOI18N
        objectEdit.setName("objectEdit"); // NOI18N

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        javax.swing.GroupLayout objectPanelLayout = new javax.swing.GroupLayout(objectPanel);
        objectPanel.setLayout(objectPanelLayout);
        objectPanelLayout.setHorizontalGroup(
            objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(objectPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(objectName, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                    .addGroup(objectPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(objectImage, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE))
                    .addGroup(objectPanelLayout.createSequentialGroup()
                        .addComponent(objectAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(objectEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        objectPanelLayout.setVerticalGroup(
            objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(objectPanelLayout.createSequentialGroup()
                .addGroup(objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(objectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(objectImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(objectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(objectEdit)
                    .addComponent(jButton3)
                    .addComponent(objectAdd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        objectsTabPanel.add(objectPanel, java.awt.BorderLayout.SOUTH);

        jTabbedPane1.addTab(resourceMap.getString("objectsTabPanel.TabConstraints.tabTitle"), objectsTabPanel); // NOI18N

        panel.add(jTabbedPane1);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        canvasPanel.setName("canvasPanel"); // NOI18N
        canvasPanel.setLayout(null);
        jScrollPane1.setViewportView(canvasPanel);

        panel.add(jScrollPane1);

        layersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("layersPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("uiFont"))); // NOI18N
        layersPanel.setMaximumSize(new java.awt.Dimension(185, 32767));
        layersPanel.setMinimumSize(new java.awt.Dimension(185, 0));
        layersPanel.setName("layersPanel"); // NOI18N
        layersPanel.setPreferredSize(new java.awt.Dimension(185, 427));

        layersScrollPane.setName("layersScrollPane"); // NOI18N

        layerList.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        layerList.setName("layerList"); // NOI18N
        layerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                layerListValueChanged(evt);
            }
        });
        layersScrollPane.setViewportView(layerList);

        layerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("layerPanel.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("uiFont"))); // NOI18N
        layerPanel.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerPanel.setMaximumSize(new java.awt.Dimension(32767, 110));
        layerPanel.setMinimumSize(new java.awt.Dimension(120, 110));
        layerPanel.setName("layerPanel"); // NOI18N
        layerPanel.setPreferredSize(new java.awt.Dimension(150, 110));

        jLabel11.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        layerName.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerName.setName("layerName"); // NOI18N

        jLabel12.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        layerAdd.setAction(actionMap.get("addLayer")); // NOI18N
        layerAdd.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerAdd.setText(resourceMap.getString("layerAdd.text")); // NOI18N
        layerAdd.setName("layerAdd"); // NOI18N

        layerType.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Image", "Tileset", "Collision Map", "Objects", "Control" }));
        layerType.setName("layerType"); // NOI18N

        javax.swing.GroupLayout layerPanelLayout = new javax.swing.GroupLayout(layerPanel);
        layerPanel.setLayout(layerPanelLayout);
        layerPanelLayout.setHorizontalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPanelLayout.createSequentialGroup()
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(layerName, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(layerType, 0, 80, Short.MAX_VALUE)))
                    .addGroup(layerPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(layerAdd)))
                .addContainerGap())
        );
        layerPanelLayout.setVerticalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPanelLayout.createSequentialGroup()
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(layerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layerType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layerAdd)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        layerEdit.setAction(actionMap.get("editLayer")); // NOI18N
        layerEdit.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerEdit.setText(resourceMap.getString("layerEdit.text")); // NOI18N
        layerEdit.setEnabled(false);
        layerEdit.setName("layerEdit"); // NOI18N

        layerRemove.setAction(actionMap.get("deleteLayer")); // NOI18N
        layerRemove.setFont(resourceMap.getFont("uiFont")); // NOI18N
        layerRemove.setText(resourceMap.getString("layerRemove.text")); // NOI18N
        layerRemove.setEnabled(false);
        layerRemove.setName("layerRemove"); // NOI18N

        javax.swing.GroupLayout layersPanelLayout = new javax.swing.GroupLayout(layersPanel);
        layersPanel.setLayout(layersPanelLayout);
        layersPanelLayout.setHorizontalGroup(
            layersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layersPanelLayout.createSequentialGroup()
                        .addGroup(layersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(layersScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layersPanelLayout.createSequentialGroup()
                                .addComponent(layerEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(layerRemove, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layersPanelLayout.createSequentialGroup()
                        .addComponent(layerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                        .addGap(2, 2, 2))))
        );
        layersPanelLayout.setVerticalGroup(
            layersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layersPanelLayout.createSequentialGroup()
                .addComponent(layersScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(layerEdit)
                    .addComponent(layerRemove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(layerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panel.add(layersPanel);

        toolBar.setRollover(true);
        toolBar.setName("toolBar"); // NOI18N

        fileToolBar.setRollover(true);
        fileToolBar.setFont(resourceMap.getFont("uiFont")); // NOI18N
        fileToolBar.setName("fileToolBar"); // NOI18N

        jButton1.setAction(actionMap.get("save")); // NOI18N
        jButton1.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jButton1.setIcon(resourceMap.getIcon("jButton1.icon")); // NOI18N
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setToolTipText(resourceMap.getString("jButton1.toolTipText")); // NOI18N
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fileToolBar.add(jButton1);

        jButton2.setAction(actionMap.get("projectSettingsDialog")); // NOI18N
        jButton2.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jButton2.setIcon(resourceMap.getIcon("jButton2.icon")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setToolTipText(resourceMap.getString("jButton2.toolTipText")); // NOI18N
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fileToolBar.add(jButton2);

        toolBar.add(fileToolBar);

        editorToolBar.setRollover(true);
        editorToolBar.setName("editorToolBar"); // NOI18N

        jToggleButton1.setAction(actionMap.get("toggleGrid")); // NOI18N
        jToggleButton1.setFont(resourceMap.getFont("uiFont")); // NOI18N
        jToggleButton1.setIcon(resourceMap.getIcon("jToggleButton1.icon")); // NOI18N
        jToggleButton1.setSelected(true);
        jToggleButton1.setText(resourceMap.getString("jToggleButton1.text")); // NOI18N
        jToggleButton1.setToolTipText(resourceMap.getString("jToggleButton1.toolTipText")); // NOI18N
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setName("jToggleButton1"); // NOI18N
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editorToolBar.add(jToggleButton1);

        toolBar.add(editorToolBar);

        setComponent(panel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
        setToolBar(toolBar);
    }// </editor-fold>//GEN-END:initComponents

    private void layerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_layerListValueChanged
        if ( ( canvas.selectedLayer = layerList.getSelectedIndex() ) >= 0 )
        {
            Layer layer = core.layers.elementAt( layerList.getSelectedIndex() );

            if ( tileFrame != null && tileFrame.getLayer() != layer )
                tileFrame.dispose();

            if ( ( tileFrame = TileFrame.create( layer ) ) != null )
                tileFrame.setVisible( true );
        }
        else if ( tileFrame != null )
            tileFrame.dispose();

        boolean isSelected = layerList.getSelectedIndex() >= 0;
        layerEdit.setEnabled( isSelected );
        layerRemove.setEnabled( isSelected );

        canvas.repaint();
    }//GEN-LAST:event_layerListValueChanged

    private void resourceListValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_resourceListValueChanged
    {//GEN-HEADEREND:event_resourceListValueChanged
        if ( ( resourceModel.selected = resourceList.getSelectedIndex() ) >= 0 )
        {
            Resource res = core.resources.elementAt( resourceModel.selected );
            String source = "not found", inProject = "not found";
            long sourceSize = res.getSourceSize(), inProjectSize = res.getSize();
            
            if ( sourceSize >= 0 ) source = ( ( Long )sourceSize ).toString() + " bytes";
            if ( inProjectSize >= 0 ) inProject = ( ( Long )inProjectSize ).toString() + " bytes";

            org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance( lilay.LilayEditorApp.class ).getContext().getResourceMap( LilayEditorView.class );
            resourceInfoLabel.setText( resourceMap.getString( "resourceInfoTemplate", source, inProject ) );
        }
        else
            resourceInfoLabel.setText( "" );

        boolean isSelected = resourceList.getSelectedIndex() >= 0;
        resourceEdit.setEnabled( isSelected );
        resourceDelete.setEnabled( isSelected );
    }//GEN-LAST:event_resourceListValueChanged

    void resizeCanvas()
    {
        canvasPanel.setPreferredSize( core.mapSize );
        canvas.setBounds( 0, 0, core.mapSize.width, core.mapSize.height );
        canvasPanel.validate();
    }

    @Action public void newProject()
    {
        //core.clear();
        //projectSettingsDialog();

        core.clear();
        currentFileName = "dummy";
        core.load( new File( "dummy" ) );
        core.layers.add( new Layer( Layer.Layer_tileset, "dummi" ) );

        resizeCanvas();
        listModel.rebuild();
        resourceModel.rebuild();
    }

    @Action public void open()
    {
        if ( chooser.showOpenDialog( getFrame() ) == JFileChooser.APPROVE_OPTION )
        {
            currentFileName = chooser.getSelectedFile().getPath();
            core.load( chooser.getSelectedFile() );
        }

        resizeCanvas();
        listModel.rebuild();
        resourceModel.rebuild();
    }
    
    @Action public void save()
    {
        if ( currentFileName != null )
            core.save( new File( currentFileName ), true );
        else
            saveAs();
    }
    
    @Action public void saveAs()
    {
        if ( chooser.showSaveDialog( getFrame() ) == JFileChooser.APPROVE_OPTION )
        {
            currentFileName = chooser.getSelectedFile().getPath();
            core.save( chooser.getSelectedFile(), true );
        }
    }

    @Action public void toggleGrid()
    {
        Layer.gridVisible = !Layer.gridVisible;
        canvas.repaint();
    }

    @Action public void addLayer()
    {
        if ( !layerName.getText().isEmpty() )
        {
            core.layers.add( new Layer( layerType.getSelectedIndex(), layerName.getText() ) );
            int index = core.layers.size() - 1;
            ( new LayerPropertiesDialog( getFrame(), index ) ).setVisible( true );
            listModel.add( index );
            canvas.repaint();
        }
    }
    
    @Action public void editLayer()
    {
        int index = layerList.getSelectedIndex();
        if ( index >= 0 )
        {
            ( new LayerPropertiesDialog( getFrame(), index ) ).setVisible( true );
            listModel.change( index );
            canvas.repaint();
        }
        else
            System.out.println( getResourceMap().getString( "layerNotSelected", "edit" ) );

        layerListValueChanged( null );
    }

    @Action public void removeLayer()
    {
        int index = layerList.getSelectedIndex();
        if ( index >= 0 )
        {
            resourceModel.remove( index );
            core.resources.remove( index );
            canvas.repaint();
        }
        else
            System.out.println( getResourceMap().getString( "layerNotSelected", "delete" ) );

        layerListValueChanged( null );
    }

    @Action public void newResource()
    {
        Resource res = new Resource();
        ResourceDialog dialog = new ResourceDialog( getFrame(), res );
        if ( dialog.ok && !res.name.isEmpty() && !res.sourceName.isEmpty() )
        {
            if ( EditorSettings.instance.autoImportResources )
                res.update();

            core.resources.add( res );
            resourceModel.add( core.resources.size() - 1 );
        }
    }
    
    @Action public void editResource()
    {
        int index = resourceList.getSelectedIndex();
        if ( index >= 0 )
        {
            new ResourceDialog( getFrame(), core.resources.elementAt( index ) );
            resourceModel.change( index );
        }
        else
            System.out.println( getResourceMap().getString( "resourceNotSelected", "edit" ) );

        resourceListValueChanged( null );
    }
    
    @Action public void deleteResource()
    {
        int index = resourceList.getSelectedIndex();
        if ( index >= 0 )
        {
            Resource res = core.resources.elementAt( index );
            res.delete();
            resourceModel.remove( index );
            core.resources.remove( index );
        }
        else
            System.out.println( getResourceMap().getString( "resourceNotSelected", "delete" ) );

        resourceListValueChanged( null );
    }

    @Action public void settingsDialog()
    {
        ( new SettingsDialog( getFrame() ) ).setVisible( true );
    }

    @Action public void projectSettingsDialog()
    {
        // TODO: do this stuff only if dialog was OK'ed
        // show the dialog
        ( new ProjectSettingsDialog( getFrame(), true ) ).setVisible( true );

        // resize layers
        for ( int i = 0; i < core.layers.size(); i++ )
            core.layers.elementAt( i ).resize( core.mapSize );

        // reflect the changes in UI
        resizeCanvas();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel canvasPanel;
    private javax.swing.JToolBar editorToolBar;
    private javax.swing.JToolBar fileToolBar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JButton layerAdd;
    private javax.swing.JButton layerEdit;
    private javax.swing.JList layerList;
    private javax.swing.JTextField layerName;
    private javax.swing.JPanel layerPanel;
    private javax.swing.JButton layerRemove;
    private javax.swing.JComboBox layerType;
    private javax.swing.JPanel layersPanel;
    private javax.swing.JScrollPane layersScrollPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JButton objectAdd;
    private javax.swing.JButton objectEdit;
    private javax.swing.JTextField objectImage;
    private javax.swing.JTextField objectName;
    private javax.swing.JPanel objectPanel;
    private javax.swing.JPanel objectsPanel;
    private javax.swing.JPanel objectsTabPanel;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JPanel panel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenu projectMenu;
    private javax.swing.JButton resourceDelete;
    private javax.swing.JButton resourceEdit;
    private javax.swing.JLabel resourceInfoLabel;
    private javax.swing.JList resourceList;
    private javax.swing.JButton resourceNew;
    private javax.swing.JPanel resourcePanel;
    private javax.swing.JPanel resourcesPanel;
    private javax.swing.JPanel resourcesTabPanel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    public abstract class GeneralListModel extends AbstractListModel
    {
        public int size;

        public void add( int pos )
        {
            fireIntervalAdded( this, pos, pos );
            size = getSize();
        }

        public void change( int pos )
        {
            fireContentsChanged( this, pos, pos );
        }
        
        public void remove( int pos )
        {
            fireIntervalRemoved( this, pos, pos );
        }
    }

    public class LayerListModel extends GeneralListModel
    {
        public Object getElementAt( int pos )
        {
            Layer layer = Core.instance.layers.elementAt( pos );
            return layer == null ? null
                    : getResourceMap().getString( "layerListItem", layer.name, layer.getTypeDescription() );
        }

        public int getSize()
        {
            return core.layers.size();
        }

        public void rebuild()
        {
            fireIntervalRemoved( this, 0, size );
            fireIntervalAdded( this, 0, size = getSize() );
        }
    }

    public class ResourceListModel extends GeneralListModel
    {
        int selected = -1;

        public Object getElementAt( int pos )
        {
            Resource res = Core.instance.resources.elementAt( pos );
            return getResourceMap().getString( "resourceListItem", res.name, res.sourceName );
        }

        public int getSize()
        {
            return core.resources.size();
        }

        public void rebuild()
        {
            fireIntervalRemoved( this, 0, size );
            fireIntervalAdded( this, 0, size = getSize() );
        }
    }
}
