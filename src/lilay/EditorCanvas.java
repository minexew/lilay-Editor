
/*
 * EditorCanvas.java
 *
 * Created on 16.5.2009, 13:46:33
 */

package lilay;

import java.awt.*;
import java.awt.event.*;
import javax.swing.JPanel;


/**
 *
 * @author Minexewl
 */
public class EditorCanvas extends JPanel implements MouseListener, MouseMotionListener
{
    public int selectedLayer;

    public EditorCanvas()
    {
        initComponents();

        addMouseListener( this );
        addMouseMotionListener( this );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMinimumSize(new java.awt.Dimension(100, 100));
        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override protected void paintComponent( Graphics g )
    {
        super.paintComponent( g );
        System.out.println( "Editor/Main paintComponent called!" );

        Core core = Core.instance;
        Graphics2D g2d = ( Graphics2D )g;

        g2d.setColor( new Color( core.backgroundColor ) );
        g2d.fillRect( 0, 0, getWidth(), getHeight() );

        // if something went "a little wrong"
        if ( selectedLayer >= core.layers.size() )
            selectedLayer = -1;

        // paint all layers until the selected one
        for ( int i = 0; i <= selectedLayer; i++ )
            core.layers.elementAt( i ).paint( g2d, this,  i == selectedLayer );
    }

    public void mouseClicked( MouseEvent event )
    {
    }

    public void mousePressed( MouseEvent event )
    {
        if ( selectedLayer >= 0 )
            Core.instance.layers.elementAt( selectedLayer ).pressed( event.getX(), event.getY(),
                    event.getButton() == MouseEvent.BUTTON3 );
        repaint();
    }

    public void mouseReleased( MouseEvent event )
    {
        if ( selectedLayer >= 0 )
            Core.instance.layers.elementAt( selectedLayer ).released( event.getX(), event.getY() );
        repaint();
    }

    public void mouseEntered( MouseEvent event )
    {
    }

    public void mouseExited( MouseEvent event )
    {
    }

    public void mouseDragged( MouseEvent event )
    {
        if ( selectedLayer >= 0 )
            Core.instance.layers.elementAt( selectedLayer ).dragged( event.getX(), event.getY() );
        repaint();
    }

    public void mouseMoved( MouseEvent event )
    {
    }
}
